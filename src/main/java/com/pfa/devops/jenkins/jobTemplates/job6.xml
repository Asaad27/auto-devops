<flow-definition plugin="workflow-job@2.41">
    <link type="text/css" rel="stylesheet" id="dark-mode-custom-link"/>
    <link type="text/css" rel="stylesheet" id="dark-mode-general-link"/>
    <style lang="en" type="text/css" id="dark-mode-custom-style"/>
    <style lang="en" type="text/css" id="dark-mode-native-style"/>
    <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.5"/>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.5">
            <jobProperties/>
            <triggers/>
            <parameters/>
            <options/>
        </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    </actions>
    <description/>
    <keepDependencies>false</keepDependencies>
    <properties>
        <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
                <hudson.model.StringParameterDefinition>
                    <name>GITHUB</name>
                    <trim>false</trim>
                </hudson.model.StringParameterDefinition>
                <hudson.model.StringParameterDefinition>
                    <name>FLAG</name>
                    <defaultValue>80</defaultValue>
                    <trim>false</trim>
                </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
        <script>
            pipeline{
            agent any


            environment{
            dockerHome = tool 'myDocker'
            PATH = "$dockerHome/bin:$PATH"
            }

            stages{
            //CheckOut stage
            stage('CheckOut'){
            steps{

            slackSend color: '#0000FF', message: "Build Started: ${env.JOB_NAME} ${env.BUILD_NUMBER} *************", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            echo 'Build'
            echo  "Path - $PATH"
            echo  "Build number - $env.BUILD_NUMBER"
            echo  "Build id - $env.BUILD_ID"
            echo  "JOB name - $env.JOB_NAME"
            echo  "Build TAGE - $env.BUILD_TAG"
            echo  "Build url - $env.BUILD_URL"
            echo "github parameter = $GITHUB"
            }
            }

            stage('git clone') {
            steps {
            script {
            sh """
            pwd
            rm -rf cloning$env.BUILD_ID
            git clone $GITHUB cloning$env.BUILD_ID
            cd cloning$env.BUILD_ID
            rm -fr Dockerfile
            mv DOCKERDEPLOY Dockerfile
            cp -rfv * ..
            cd ..
            rm -r cloning$env.BUILD_ID
            """
            }
            }
            }

            //Build docker image
            stage('Build docker Image'){
            steps{
            script{
            slackSend color: '#000000', message: "building docker image", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            dockerImage = docker.build("asaad27/my_repo:${env.BUILD_TAG}")
            }
            }
            }

            stage('Running Docker Image'){
            steps{
            script{
            slackSend color: '#0000FF', message: "running docker image", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            sh """
            pwd

            docker run --rm -p 5000:5000 asaad27/my_repo:${env.BUILD_TAG}
            """
            }
            }
            }

            //Push Docker Image
            stage('Push Docker Image'){
            steps{
            script{
            slackSend color: '#000000', message: "pushing docker image to dockerhub : asaad27/my_repo:${env.BUILD_TAG}", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            docker.withRegistry('', 'dockerhub'){
            dockerImage.push();
            dockerImage.push('latest');
            }
            }
            }
            }


            }
            post {
            always {
            echo 'The service is running'
            }

            success {
            echo 'The service is running: Success'
            slackSend color: '#00FF00', message: "build finished successfully", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            }

            failure {
            echo 'The service is running: Failure'
            slackSend color: '#8B0000 ', message: "build failed", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            }
            }
            }
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>