<flow-definition plugin="workflow-job@2.41">
    <link type="text/css" rel="stylesheet" id="dark-mode-custom-link"/>
    <link type="text/css" rel="stylesheet" id="dark-mode-general-link"/>
    <style lang="en" type="text/css" id="dark-mode-custom-style"/>
    <style lang="en" type="text/css" id="dark-mode-native-style"/>
    <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.5"/>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.5">
            <jobProperties/>
            <triggers/>
            <parameters/>
            <options/>
        </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    </actions>
    <description/>
    <keepDependencies>false</keepDependencies>
    <properties/>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.92">
        <script>
            pipeline{
            agent any


            environment{
            dockerHome = tool 'myDocker'
            PATH = "$dockerHome/bin:$PATH"
            }

            stages{
            //CheckOut stage
            stage('CheckOut'){
            steps{

            slackSend color: '#0000FF', message: "Build Started: ${env.JOB_NAME} ${env.BUILD_NUMBER} *************", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            echo 'Build'
            echo  "Path - $PATH"
            echo  "Build number - $env.BUILD_NUMBER"
            echo  "Build id - $env.BUILD_ID"
            echo  "JOB name - $env.JOB_NAME"
            echo  "Build TAGE - $env.BUILD_TAG"
            echo  "Build url - $env.BUILD_URL"
            }
            }

            stage('exporting credentials'){
            steps{
            slackSend color: '#000000', message: "exporting credentials", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            sh """
            export AWS_ACCESS_KEY_ID="AKIA2MGOQ3GTI7GIGNOO"
            export AWS_SECRET_ACCESS_KEY="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"
            export AWS_ACCESS_KEY="AKIA2MGOQ3GTI7GIGNOO"
            export AWS_SECRET_KEY="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"
            """
            }
            }

            stage('git clone') {
            steps {
            script {
            slackSend color: '#0000FF', message: "initializing workspace", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            sh """
            pwd
            rm -rf cloning$env.BUILD_ID
            git clone https://github.com/Asaad27/infrastructure-terraform.git cloning$env.BUILD_ID
            cd cloning$env.BUILD_ID
            cp -rfv * ..
            cd ..
            rm -r cloning$env.BUILD_ID
            """
            }
            }
            }


            stage('creating infrastructure with terraform'){
            steps{
            script{
            slackSend color: '#000000', message: "creating infrastructure with terraform", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            sh """
            terraform init -upgrade
            terraform apply -auto-approve
            """
            }
            }
            }

            stage('configuring aws environnement'){
            steps{
            script{
            slackSend color: '#0000FF', message: "Configuring aws environement", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            sh '''
            aws configure set aws_access_key_id AKIA2MGOQ3GTI7GIGNOO
            aws configure set aws_secret_access_key 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
            aws eks --region $(terraform output -raw region) update-kubeconfig --name $(terraform output -raw cluster_name)
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml
            kubectl apply -f https://raw.githubusercontent.com/hashicorp/learn-terraform-provision-eks-cluster/master/kubernetes-dashboard-admin.rbac.yaml
            ADMIN_USER_TOKEN_NAME=$(kubectl -n kube-system get secret | grep admin-user-token | cut -d' ' -f1)
            ADMIN_USER_TOKEN_VALUE=$(kubectl -n kube-system get secret "$ADMIN_USER_TOKEN_NAME" -o jsonpath='{.data.token}' | base64 --decode)
            USER_TOKEN=$(aws eks --region $(terraform output -raw region) update-kubeconfig --name $(terraform output -raw cluster_name))
            '''
            }
            }
            }

            stage('deploying application to kubernetes cluster and outputing required informations'){
            steps{
            script{
            sh '''
            kubectl create -f flask-deployment.yml
            kubectl create -f flask-service.yml
            kubectl describe services flask
            kubectl describe services flask | grep IP: >> flaskOutput.txt
            kubectl describe services flask | grep "LoadBalancer Ingress" >> flaskOutput.txt
            kubectl describe services flask | grep NodePort >> flaskOutput.txt
            kubectl get services | grep flask >> flaskOutput.txt
            '''
            def data = readFile(file: 'flaskOutput.txt')

            archiveArtifacts artifacts: '**/*.txt', followSymlinks: false
            slackSend color: '#000000', message: "credentials and ip: $data", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            }
            }
            }

            stage('running kubernetes proxy'){
            steps{
            script{
            slackSend color: '#0000FF', message: "running kubernetes dashboard with proxy: http://127.0.0.1:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            sh'''
            kubectl proxy
            '''
            }
            }
            }






            }
            post {
            always {
            echo 'The service is running'
            }

            success {
            echo 'The service is running: Success'
            slackSend color: '#00FF00', message: "build finished successfully", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            }

            failure {
            echo 'The service is running: Failure'
            slackSend color: '#8B0000 ', message: "build failed", tokenCredentialId: '47dd3c74-c484-4c3f-8cba-732276cc70a9'
            }
            }
            }
        </script>
        <sandbox>false</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>